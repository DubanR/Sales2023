@page "/states/edit/{stateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar estado/departamento</h3>

@if (state is null)
{
    <div class="spinner" />
}
else
{
    <StateForm @ref="stateForm" State="state" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private State? state;
    private StateForm? stateForm;

    [Parameter]
    public int stateId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{stateId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/states/", state);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());

        Return();
    }

    private void Return()
    {
        stateForm!.formPostedSuccessfully = true;
        navigationManager.NavigateTo($"/countries/details/{state!.Countryid}");
    }
}
